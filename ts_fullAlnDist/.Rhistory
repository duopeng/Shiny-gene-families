## read the phylogenetic tree
tree <- read.tree(paste0(remote_folder, "tree.nwk"))
## read the sampling information data set
info <- read.csv(paste0(remote_folder,"info.csv"))
## read and process the allele table
snps<-read.csv(paste0(remote_folder, "alleles.csv"), header = F,
row.names = 1, stringsAsFactor = F)
snps_strainCols <- snps[1,]
snps<-snps[-1,] # drop strain names
colnames(snps) <- snps_strainCols
gapChar <- "?"
snp <- t(snps)
lsnp <- apply(snp, 1, function(x) {
x != snp[1,] & x != gapChar & snp[1,] != gapChar
})
lsnp <- as.data.frame(lsnp)
lsnp$pos <- as.numeric(rownames(lsnp))
lsnp <- tidyr::gather(lsnp, name, value, -pos)
snp_data <- lsnp[lsnp$value, c("name", "pos")]
## read the trait data
bar_data <- read.csv(paste0(remote_folder, "bar.csv"))
## visualize the tree
p <- ggtree(tree)
## attach the sampling information data set
## and add symbols colored by location
p <- p %<+% info + geom_tippoint(aes(color=location))
## visualize SNP and Trait data using dot and bar charts,
## and align them based on tree structure
p + geom_facet(panel = "SNP", data = snp_data, geom = geom_point,
mapping=aes(x = pos, color = location), shape = '|') +
geom_facet(panel = "Trait", data = bar_data, geom = ggstance::geom_barh,
aes(x = dummy_bar_value, color = location, fill = location),
stat = "identity", width = .6) +
theme_tree2(legend.position=c(.05, .85))
snp_data
bar_data
tree
tip_df1
#
#install.packages('devtools')
library(devtools)
install_github('YuLab-SMU/ggtree')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("ggtree")
library(ggtree)
library(ggimage)
library(ape)
library(phytools)
library(ggplot2)
library(viridis)
library(scales)
show_col(plasma(20))
#load 20E data
dat20E <- read.table("F:\\OneDrive - Harvard University\\research\\Flam lab\\phylogenetic_analysis\\2463\\data_species_EPPase_20Etiter.tab",
sep="\t",header = TRUE, stringsAsFactors = FALSE, na.strings = "n.a.")
names(dat20E) <- c("Specie", "MAG_20E_pg", "Atrium_20E_pg", "Male_E", "EPPAse_geneID")
#load MrBayes tree
require(treeio)
#MAFFT_treFile <- ("F:\\OneDrive - Harvard University\\research\\Flam lab\\phylogenetic_analysis\\2463\\2463MAFFT\\MrBny98_2463MAFFT_outgroup_1\\MrBny98_2463MAFFT.con.tre")
#MUSCLE_treFile <- ("F:\\OneDrive - Harvard University\\research\\Flam lab\\phylogenetic_analysis\\2463\\2463MUSCLE\\MrB_2463MUSCLE_outgroup_1\\MrB_2463MUSCLE.con.tre")
MAFFT_treFile <- ("F:\\OneDrive - Harvard University\\research\\Flam lab\\phylogenetic_analysis\\2463\\2463MAFFTnoDM\\MrBny98_2463MAFFT_outgroup_1_noDM\\MrBny98_2463MAFFT.con.tre.spp.tre")
MUSCLE_treFile <- ("F:\\OneDrive - Harvard University\\research\\Flam lab\\phylogenetic_analysis\\2463\\2463MUSCLEnoDM\\MrB_2463MUSCLE_outgroup_1_noDM\\MrB_2463MUSCLE.con.tre.spp.tre")
mrB_MUSCLEtre <- read.mrbayes(MUSCLE_treFile)
mrB_MAFFTtre <- read.mrbayes(MAFFT_treFile)
#check tree object
#get.fields(mrB_tre)
#get.data(mrB_tre)
#find tip label -- node conversion
#mrB_tre@phylo$tip.label
#conver posterior probability to numeric
mrB_MUSCLEtre@data$prob_percent = as.numeric(mrB_MUSCLEtre@data$prob_percent)
mrB_MAFFTtre@data$prob_percent = as.numeric(mrB_MAFFTtre@data$prob_percent)
#add 20E data to treee
tip_label_order <- mrB_MUSCLEtre@phylo$tip.label
tip_df = data.frame(tip_label=tip_label_order)
tip_df1 = merge.data.frame(x = tip_df, y = dat20E, by.x ="tip_label", by.y ="Specie", all.x = TRUE, all.y=FALSE)
mrB_MAFFTtre@phylo$MAG_20E <- tip_df1$`20E_pg_per_MAGS`
tip_df1
mrB_MAFFTtre@phylo
mrB_MAFFTtre@phylo$tip.label
tip_df1
p2 + geom_facet(panel = "MAG_20E_pg", data = tip_df1[,c("tip_label", "MAG_20E_pg")], geom = geom_point,
mapping=aes(x = pos, color = location), shape = '|')
p <- ggtree(mrB_MAFFTtre, aes(color=prob_percent),size = 1.3) %<+% tip_df1 +
scale_color_continuous(low=plasma(20)[19], high=plasma(20)[4]) +
xlim(-0.1,1.6)
p2 <- p + geom_tiplab(color = "grey40",offset = .6, hjust = .5) +
geom_tippoint(aes(size = Male_E), color = "black") +
theme(legend.position = c(.05, .7)) + scale_size_continuous(range = c(1, 8))
p2
p2 + geom_facet(panel = "MAG_20E_pg", data = tip_df1[,c("tip_label", "MAG_20E_pg")], geom = geom_point,
mapping=aes(x = pos, color = location), shape = '|')
bar_data
tree
shiny::runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp()
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
?unique
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp()
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp()
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
table1N2_dedup_sig$GeneID
unique(table1N2_dedup_sig$GeneID)
table1N2_dedup_up$GeneID
unique(table1N2_dedu_down$GeneID)
sigGenes = unique(table1N2_dedup_sig$GeneID)
sigGenes
sigGenes
sig_GeneIDs
path <- "http://pantherdb.org/services/oai/pantherdb/enrich/overrep"
AnnoDataSet = "GO:0003674" #molecular function
print(paste0("enrichment analysis with ", length(table1N2_dedup_sig$GeneID), " genes"))
results_df_sig_mf =  PantherGOenrich(sig_GeneIDs,path, AnnoDataSet )
Sys.sleep(1)
print(paste0("enrichment analysis with ", length(sig_GeneIDs), " genes"))
results_df_sig_mf =  PantherGOenrich(sig_GeneIDs,path, AnnoDataSet )
Sys.sleep(1)
print(paste0("enrichment analysis with ", length(sigGenes), " genes"))
results_df_sig_mf =  PantherGOenrich(sig_GeneIDs,path, AnnoDataSet )
Sys.sleep(1)
print(paste0("enrichment analysis with ", length(downGenes), " genes"))
results_df_down_mf =  PantherGOenrich(down_GeneIDs,path, AnnoDataSet )
print(paste0("enrichment analysis with ", length(upGenes), " genes"))
results_df_up_mf  =  PantherGOenrich(up_GeneIDs,path, AnnoDataSet )
Sys.sleep(1)
print(paste0("enrichment analysis with ", length(sigGenes), " genes"))
results_df_sig_mf =  PantherGOenrich(sig_GeneIDs,path, AnnoDataSet )
Sys.sleep(1)
if (length(sigGenes)>9000){sigGenes = sigGenes[1:9000]} # if #of  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
if (length(sigGenes)>9000){sigGenes = sigGenes[1:9000]} # if #of  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
if (length(sigGenes)>9000){sigGenes = sigGenes[1:9000]} # if #of  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
if (length(upGenes)>9000){upGenes = upGenes[1:9000]}
if (length(downGenes)>9000){downGenes = downGenes[1:9000]}
sig_GeneIDs = paste(sigGenes, collapse = ",")
print(paste0("enrichment analysis with ", length(sigGenes), " genes"))
results_df_sig_mf =  PantherGOenrich(sig_GeneIDs,path, AnnoDataSet )
Sys.sleep(1)
if (length(sigGenes)>5000){sigGenes = sigGenes[1:5000]} # if #of  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
sig_GeneIDs = paste(sigGenes, collapse = ",")
print(paste0("enrichment analysis with ", length(sigGenes), " genes"))
results_df_sig_mf =  PantherGOenrich(sig_GeneIDs,path, AnnoDataSet )
Sys.sleep(1)
length(sigGenes)
sigGenes[1:5000]
if (length(sigGenes)>5000){sigGenes = sigGenes[1:5000]} # if #of  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
if (length(sigGenes)>5000)
{sigGenes = sigGenes[1:5000]}
sigGenes
if (length(sigGenes)>5000) # if  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
{
sigGenes = sigGenes[1:5000]
}
sigGenes = sigGenes[1:5000]
sigGenes
if (length(sigGenes)>5000) # if  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
{
sigGenes = sigGenes[1:5000]
}
if (length(upGenes)>9000)
{
upGenes = upGenes[1:9000]
}
if (length(downGenes)>9000)
{
downGenes = downGenes[1:9000]
}
sig_GeneIDs = paste(sigGenes, collapse = ",")
up_GeneIDs = paste(upGenes, collapse = ",")
down_GeneIDs = paste(downGenes, collapse = ",")
print(paste0("enrichment analysis with ", length(sigGenes), " genes"))
results_df_sig_mf =  PantherGOenrich(sig_GeneIDs,path, AnnoDataSet )
Sys.sleep(1)
sigGenes = unique(table1N2_dedup_sig$GeneID)
upGenes = unique(table1N2_dedup_up$GeneID)
downGenes = unique(table1N2_dedu_down$GeneID)
if (length(sigGenes)>7000) # if  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
{
sigGenes = sigGenes[1:7000]
}
length(sigGenes)
if (length(sigGenes)>7000) # if  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
{
sigGenes = sigGenes[1:7000]
}
sigGenes = sigGenes[1:7000]
sigGenes
sig_GeneIDs = paste(sigGenes, collapse = ",")
print(paste0("enrichment analysis with ", length(sigGenes), " genes"))
results_df_sig_mf =  PantherGOenrich(sig_GeneIDs,path, AnnoDataSet )
Sys.sleep(1)
sigGenes = unique(table1N2_dedup_sig$GeneID)
upGenes = unique(table1N2_dedup_up$GeneID)
downGenes = unique(table1N2_dedu_down$GeneID)
if (length(sigGenes)>6000) # if  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
{
sigGenes = sigGenes[1:6000]
}
if (length(upGenes)>6000)
{
upGenes = upGenes[1:6000]
}
if (length(downGenes)>6000)
{
downGenes = downGenes[1:6000]
}
sig_GeneIDs = paste(sigGenes, collapse = ",")
up_GeneIDs = paste(upGenes, collapse = ",")
down_GeneIDs = paste(downGenes, collapse = ",")
print(paste0("enrichment analysis with ", length(sigGenes), " genes"))
results_df_sig_mf =  PantherGOenrich(sig_GeneIDs,path, AnnoDataSet )
Sys.sleep(1)
length(sigGenes)
if (length(sigGenes)>6000) # if  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
{
sigGenes = sigGenes[1:6000]
}
if (length(upGenes)>6000)
{
upGenes = upGenes[1:6000]
}
if (length(downGenes)>6000)
{
downGenes = downGenes[1:6000]
}
length(sigGenes)
sigGenes[1:6000]
sig_GeneIDs = paste(sigGenes, collapse = ",")
up_GeneIDs = paste(upGenes, collapse = ",")
down_GeneIDs = paste(downGenes, collapse = ",")
print(paste0("enrichment analysis with ", length(sigGenes), " genes"))
results_df_sig_mf =  PantherGOenrich(sig_GeneIDs,path, AnnoDataSet )
Sys.sleep(1)
sigGenes
if (length(sigGenes)>6000) # if  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
{
sigGenes = sigGenes[1:6000]
}
if (length(sigGenes)>6000) # if  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
{
sigGenes <- sigGenes[1:6000]
}
if (length(sigGenes)>6000) # if  significant genes >10000, do a hard cutoff, since the limit for GO enrichment API is 10000 gene IDs
{
sigGenes <- sigGenes[1:6000]
}
length(sigGenes)
sigGenes[1:6000]
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
length(sigGenes)
length(sigGenes)
library(shiny); runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
d
library(shiny); runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
?v
?textInput
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
?br()
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
library(shiny); runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
factor1
factor2
dat_PCA_out
myinput$factor1
factor(eval(parse(text=factor2))
)
factor2
dat_PCA_out[,factor1]
levels(dat_PCA_out[,factor1])
length(levels(dat_PCA_out[,factor2]))
runApp('Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
shiny::runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v3/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v2/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v3/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
shiny::runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v3/ShinyEcRNAseqDEG')
shiny::runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v3/ShinyEcRNAseqDEG')
shiny::runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v3/ShinyEcRNAseqDEG')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/Shiny_RNAseq_v3/ShinyEcRNAseqDEG')
rstudioapi::getActiveDocumentContext()$path
getActiveDocumentContext()
rstudioapi::getActiveDocumentContext()
library(shiny); runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
dat_subset
dat_for_plotting
length(nrow(dat_subset))
paste0(nrow(dat_subset), " lipids"
)
dat_subset
rownames(dat_subset)
dat_subset
str(dat_subset)
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
library(shiny); runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/RNAseq/201905-201808/120analysis/nodsEcR/test')
# define sp500 symbol table for stock history lookup
output$sp500Table = DT::renderDataTable( sp500 , escape=T )
# this pgm will hopefully download time-series data from yahoo.finance
# from a table listing the sp500 you will select 3 rows
# one row designated by the setResponse button is the response variable to be predicted
# in a regression
# the next two rows will determine the explanatory vars  and is set by
# the user pressing the selEVars button
#   server.R
library(shiny)
library(googlesheets)
library(DT)
# the google sheet is a great way to store data
sheet <- gs_title( 'tickerSymbols' )
sp500 = gs_read_csv(sheet)   # it's a google sheet
shinyServer(   function(input, output, session ) {
# define sp500 symbol table for stock history lookup
output$sp500Table = DT::renderDataTable( sp500 , escape=T )
rsIndex = eventReactive( input$setResponse, {
if( length( input$sp500Table_cell_clicked$row ) > 0 ) {
setResponse = input$sp500Table_cell_clicked$row
return( setResponse )
} # end if
}  # end code chunk
)   # end obs evt fun
# this sets the expl. vars  set in ui.R
eVarIndex= eventReactive( input$selEVars, {
if( length( input$sp500Table_rows_selected ) >= 2 ) {
selEVars = input$sp500Table_rows_selected
return( selEVars[2:3] )
}  # end if
}  # end code chunk for obs evt
)   # obs evt fun
# here is the probable location of problem
# this data.frame does not show up unless i select 4 rows!
observeEvent( input$sp500Table_rows_selected ,  {
if( length(eVarIndex() ) >= 2  && length( rsIndex())>=1 ) {
rs=c( rsIndex(), eVarIndex() )
cc = c( 'response', 'expl. var. 1', 'expl. var. 2' )
sel.df =  data.frame( description=cc, sp500[ rs ,  ] )
output$tabO = renderTable( sel.df  )
} # endif
}  # end chunk
}  # end server chunk fun
)   # end shinyserver fun
# the ui follows
#  ui.R
library(shiny)
library(shinyBS)
shinyUI(
fluidPage(
tags$style(type='text/css', ".shiny-table { color: blue; font-weight:
bold;  font-size: 10px; line-height: 12px;}")
,  # ,
bsCollapsePanel(
h5("Select a response and 2 explanatory variables")
, # ,
# i hope the labels are self explanatory as to the objective
actionButton( inputId = 'setResponse', label = 'set response variable'
)
,  # ,
actionButton( inputId = 'selEVars', label = 'select 2 explantory
variables' )
,  # ,
actionButton( input='bldModel', label='build predictive model' )
,  # ,
h6( 'selected variables for model construction' )
,  # ,    # and the problem table appears here!
tableOutput( outputId='tabO' )
,  # ,
br()
, # ,
DT::dataTableOutput( "sp500Table" )
)  # end panel
)    # end page
)  # end UI
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
dat
rownames(,2)
colnames(dat)
colnames(dat)[2]
colnames(dat)[2] = "Feeding Infection"
colnames(dat)
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
library(shiny); runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/Shinylipids2.R')
library(shiny); runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/ShinyLipidsV2/ShinylipidsV2.R')
library(shiny); runApp('F:/OneDrive - Harvard University/research/Flam lab/lipidomics/ShinyLipidsV2/ShinylipidsV2.R')
shiny::runApp('F:/OneDrive - Harvard University/research/Tarleton_Lab/clustering/production_ts_fullAlnDist')
runApp('F:/OneDrive - Harvard University/research/Tarleton_Lab/clustering/production_ts_fullAlnDist')
setwd("F:/OneDrive - Harvard University/research/Tarleton_Lab/clustering/production_ts_fullAlnDist")
#load distance matrix
dat = read.delim(paste0("data/ts_BrA4_YC6_fullAlnDist",".fasta.aln.fasta.mat"), header = FALSE, sep = " ", quote = "\"", dec = ".", fill = TRUE)
loc = read.delim(paste0("data/ts_BrA4_YC6_fullAlnDist",".fasta.aln.fasta.mat.loc.tab"), col.names=c("gene_ID","chr","start","end","strand","annotation"), header = FALSE, sep = "\t", quote = "\"", dec = ".", fill = TRUE)
rownames(loc) <- loc[,1]
loc$length=loc$end-loc$start
loc$geneID_contig_length_annotation=paste(loc$gene_ID,loc$chr,loc$length,loc$annotation,sep=' ')
loc$specie = str_split_fixed(loc$gene_ID, "_",2)[,1]
d <- as.dist(dat2)
dat = read.delim(paste0("data/ts_BrA4_YC6_fullAlnDist",".fasta.aln.fasta.mat"), header = FALSE, sep = " ", quote = "\"", dec = ".", fill = TRUE)
dat2 <- dat[,-1]
rownames(dat2) <- dat[,1]
colnames(dat2) <- dat[,1]
loc = read.delim(paste0("data/ts_BrA4_YC6_fullAlnDist",".fasta.aln.fasta.mat.loc.tab"), col.names=c("gene_ID","chr","start","end","strand","annotation"), header = FALSE, sep = "\t", quote = "\"", dec = ".", fill = TRUE)
rownames(loc) <- loc[,1]
loc$length=loc$end-loc$start
loc$geneID_contig_length_annotation=paste(loc$gene_ID,loc$chr,loc$length,loc$annotation,sep=' ')
loc$specie = str_split_fixed(loc$gene_ID, "_",2)[,1]
d <- as.dist(dat2)
mds.coor <- cmdscale(d)
d
loc
colnames(mds.coor)=c("x","y")
plot_mat <<- merge(mds.coor,loc, by = "row.names" )
x_lims=c(min(plot_mat$x),max(plot_mat$x))
y_lims=c(min(plot_mat$y),max(plot_mat$y))
head(plot_mat)
head(loc)
runApp()
runApp()
loc = read.delim(paste0("data/ts_BrA4_YC6_fullAlnDist",".fasta.aln.fasta.mat.loc.tab"), col.names=c("gene_ID","chr","start","end","strand","annotation"), header = FALSE, sep = "\t", quote = "\"", dec = ".", fill = TRUE)
rownames(loc) <- loc[,1]
loc$length=loc$end-loc$start
loc$geneID_contig_length_annotation=paste(loc$gene_ID,loc$chr,loc$length,loc$annotation,sep=' ')
loc$specie = str_split_fixed(loc$gene_ID, "_",2)[,1]
plot_mat = cbind(data.frame(Row.names = NULL, x=NULL, y=NULL),
loc)
loc
dim(loc)
plot_mat = cbind(data.frame(Row.names = rep("0",dim(loc)[1]), x=rep("0",dim(loc)[1]), y=rep("0",dim(loc)[1])),
loc)
runApp()
runApp('F:/OneDrive - Harvard University/research/Tarleton_Lab/clustering/production_ts')
runApp('F:/OneDrive - Harvard University/research/Tarleton_Lab/clustering/production_ts')
runApp('../production_ts_fullAlnDist_v2')
runApp('../production_ts_fullAlnDist_v2')
runApp('../production_ts_fullAlnDist_v2')
runApp('../production_ts_fullAlnDist_v2')
runApp('F:/OneDrive - Harvard University/research/Tarleton_Lab/clustering/production')
runApp('../production_ts_fullAlnDist_v2')
runApp('F:/OneDrive - Harvard University/research/Tarleton_Lab/clustering/production')
runApp('F:/OneDrive - Harvard University/research/Tarleton_Lab/clustering/production')
runApp()
runApp('F:/OneDrive - Harvard University/research/Tarleton_Lab/clustering/production')
runApp('F:/OneDrive - Harvard University/research/Tarleton_Lab/clustering/production')
runApp('F:/OneDrive - Harvard University/research/Tarleton_Lab/clustering/production')
